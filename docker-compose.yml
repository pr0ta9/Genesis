services:
  # PostgreSQL service (REQUIRED for main application database)
  postgres:
    image: postgres:15-alpine
    container_name: genesis-postgres
    environment:
      POSTGRES_DB: gen
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - genesis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gen"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Weaviate service (REQUIRED for vector search and precedent storage)
  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.33.0
    container_name: genesis-weaviate
    command:
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    - --scheme
    - http
    ports:
      - "8080:8080"
      - "50051:50051"
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_API_BASED_MODULES: 'true'
      ENABLE_MODULES: 'text2vec-ollama'
      CLUSTER_HOSTNAME: 'node1'
      # Ollama connection (using host system Ollama)
      OLLAMA_ENDPOINT: 'http://host.docker.internal:11434'
    networks:
      - genesis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/v1/.well-known/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Ollama service (HEAVILY required by your code)
# Ollama service commented out - using host system Ollama instead
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: genesis-ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_models:/root/.ollama
  #   networks:
  #     - genesis-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 20s

  # Database migration service - runs before backend to ensure schema is up-to-date
  # db-migrate:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: genesis-db-migrate
  #   environment:
  #     - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/gen
  #   env_file:
  #     - .env
  #   networks:
  #     - genesis-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   command: ["python", "src/db/migrations.py"]
  #   restart: "no"  # Only run once, don't restart

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: genesis-backend
    ports:
      - "8000:8000"
    environment:
      - GENESIS_KEEP_WORKSPACE=1
      - GENESIS_PROJECT_ROOT=/app
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/gen
      - CORS_ORIGINS=["http://localhost:3000","http://frontend:3000"]
      - ALLOWED_FILE_ROOTS=/app/.staging_uploads:/tmp
      # Ollama configuration (using host system Ollama)
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_HOST=host.docker.internal:11434
      # Weaviate connection
      - WEAVIATE_URL=http://weaviate:8080
    env_file:
      - .env
    volumes:
      # Persist data directories (bind-mounted so you can view them on host)
      - ./data:/app/data
      - ./tmp:/app/tmp
      - ./inputs:/app/inputs
      - ./outputs:/app/outputs
      # Mount for SQLite database persistence
      - ./db:/app/db
      # Persist SQLite DB to Windows AppData (Docker expands ${APPDATA})
      - ${APPDATA}/Genesis:/root/.genesis
    networks:
      - genesis-network
    depends_on:
      postgres:
        condition: service_healthy
      weaviate:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully  # Wait for migration to complete
# No longer depends on ollama service - using host Ollama
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE: "http://localhost:8000"
    container_name: genesis-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
    depends_on:
      - backend
      - weaviate
    networks:
      - genesis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: CLI service for running Genesis CLI commands
  cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: genesis-cli
    environment:
      - GENESIS_KEEP_WORKSPACE=1
      - GENESIS_PROJECT_ROOT=/app
    env_file:
      - .env
    volumes:
      # Same volumes as backend for data consistency
      - ./data:/app/data
      - ./tmp:/app/tmp
      - ./inputs:/app/inputs
      - ./outputs:/app/outputs
      - ./db:/app/db
    networks:
      - genesis-network
    command: ["python", "main.py"]
    stdin_open: true
    tty: true
    profiles:
      - cli  # This service only runs when explicitly requested
    restart: "no"

volumes:
  genesis_data:
    driver: local
  genesis_tmp:
    driver: local
  genesis_inputs:
    driver: local
  genesis_outputs:
    driver: local
  genesis_db:
    driver: local
  postgres_data:
    driver: local
  weaviate_data:
    driver: local
# ollama_models volume not needed - using host system Ollama

networks:
  genesis-network:
    driver: bridge
